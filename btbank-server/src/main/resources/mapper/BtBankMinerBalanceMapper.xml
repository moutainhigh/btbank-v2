<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.spark.bitrade.repository.mapper.BtBankMinerBalanceMapper">
    <resultMap id="BaseResultMap" type="com.spark.bitrade.repository.entity.BtBankMinerBalance">
        <!--@mbg.generated-->
        <!--@Table bt_bank_miner_balance-->
        <id column="id" jdbcType="BIGINT" property="id"/>
        <result column="member_id" jdbcType="BIGINT" property="memberId"/>
        <result column="balance_amount" jdbcType="DECIMAL" property="balanceAmount"/>
        <result column="lock_amount" jdbcType="DECIMAL" property="lockAmount"/>
        <result column="processing_reward_sum" jdbcType="DECIMAL" property="processingRewardSum"/>
        <result column="got_reward_sum" jdbcType="DECIMAL" property="gotRewardSum"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="update_time" jdbcType="TIMESTAMP" property="updateTime"/>
        <result column="got_shared_reward_sum" jdbcType="DECIMAL" property="gotSharedRewardSum"/>
        <result column="miner_grade" jdbcType="TINYINT" property="minerGrade"/>
    </resultMap>


    <!--
    <resultMap id="MinerRecommandVO" type="com.spark.bitrade.api.vo.MinerRecommandVO">

        <result column="mobile_phone" jdbcType="VARCHAR" property="mobilePhone"/>
        <result column="username" jdbcType="VARCHAR" property="username"/>
        <result column="miner_grade" jdbcType="TINYINT" property="minerGrade"/>
        <result column="is_miner" jdbcType="TINYINT" property="isMiner"/>
        <result column="registration_time" jdbcType="TIMESTAMP" property="registrationTime"/>
    </resultMap>
-->
    <sql id="MinerRecommand_BaseColum_List">
        mobile_phone,username,miner_grade,is_miner,registration_time
    </sql>


    <sql id="Base_Column_List">
        <!--@mbg.generated-->
        id, member_id, balance_amount, lock_amount, processing_reward_sum, got_reward_sum,
        create_time, update_time, got_shared_reward_sum, miner_grade
    </sql>

    <!--auto generated by MybatisCodeHelper on 2019-10-24-->
    <select id="findFirstByMemberId" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from bt_bank_miner_balance
        where member_id=#{memberId,jdbcType=BIGINT}
        limit 1
    </select>

    <!--auto generated by MybatisCodeHelper on 2019-10-24-->
    <update id="updateIncBalanceAmount">
        update bt_bank_miner_balance
        set balance_amount=balance_amount+#{addedBalanceAmount,jdbcType=DECIMAL},
        update_time= now()
        where member_id=#{memberId,jdbcType=BIGINT}
    </update>

    <select id="dispatchMiner" resultType="com.spark.bitrade.repository.entity.BtBankMinerBalance">
        SELECT
        <include refid="Base_Column_List"/>
        FROM
        (
        SELECT
        bbmb.*, (
        SELECT
        count(id)
        FROM
        bt_bank_miner_order_transaction bbmot
        WHERE
        bbmot.type IN (1, 2)
        AND bbmot.member_id = bbmb.member_id
        and bbmot.create_time <![CDATA[>=]]> DATE_SUB(NOW(),INTERVAL 1 DAY)
        ) order_count,
        (
        SELECT
        sum(money)
        FROM
        bt_bank_miner_order_transaction bbmot
        WHERE
        bbmot.type IN (1, 2)
        AND bbmot.member_id = bbmb.member_id
        and bbmot.create_time <![CDATA[>=]]> DATE_SUB(NOW(),INTERVAL 1 DAY)
        ) order_amount
        FROM
        bt_bank_miner_balance bbmb
        WHERE
        bbmb.balance_amount <![CDATA[>=]]> #{amount}
        AND NOT EXISTS
        (
        select id from member
        where transaction_status = 0
        and id = bbmb.member_id
        )
        ) ll
        ORDER BY
        ll.order_amount ASC,
        ll.order_count ASC
        limit 1
    </select>
    <select id="getRecommandList" resultType="com.spark.bitrade.api.vo.MinerRecommandVO">
        select
        <include refid="MinerRecommand_BaseColum_List"></include>
        FROM (
        SELECT
        m.id,
        m.mobile_phone AS mobile_phone,
        m.username AS username,
        m.registration_time AS registration_time,
        CASE
        WHEN ISNULL(info.miner_grade) THEN
        0
        ELSE
        info.miner_grade
        END AS miner_grade
        ,

        CASE
        WHEN tran.type = 1 THEN
        1
        ELSE
        0
        END AS is_miner

        FROM
        member AS m
        LEFT JOIN bt_bank_miner_balance AS info ON m.id = info.member_id
        LEFT JOIN bt_bank_miner_balance_transaction AS tran ON m.id = tran.member_id
        WHERE
        m.inviter_id = #{memberId}
        AND ( tran.type = 1 OR ISNULL(tran.type) ) GROUP BY m.id order by m.registration_time desc
        ) as t
    </select>
</mapper>