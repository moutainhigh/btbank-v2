<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.spark.bitrade.repository.mapper.BtBankMinerOrderMapper">
    <resultMap id="BaseResultMap" type="com.spark.bitrade.repository.entity.BtBankMinerOrder">
        <!--@mbg.generated-->
        <!--@Table bt_bank_miner_order-->
        <id column="id" jdbcType="BIGINT" property="id"/>
        <result column="upstream_order_id" jdbcType="VARCHAR" property="upstreamOrderId"/>
        <result column="money" jdbcType="DECIMAL" property="money"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="status" jdbcType="TINYINT" property="status"/>
        <result column="process_time" jdbcType="TIMESTAMP" property="processTime"/>
        <result column="member_id" jdbcType="BIGINT" property="memberId"/>
    </resultMap>
    <sql id="Base_Column_List">
        <!--@mbg.generated-->
        id, upstream_order_id, money, create_time, `status`, process_time, member_id
    </sql>
    <select id="findOrderByMemberId" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from bt_bank_miner_order
    </select>
    <select id="listDispatchOrder" resultType="com.spark.bitrade.repository.entity.BtBankMinerOrder">
        SELECT
        <include refid="Base_Column_List"/>
        FROM
        bt_bank_miner_order bbmo
        WHERE
        bbmo. STATUS = 0
        and create_time <![CDATA[<=]]> DATE_SUB(NOW(),INTERVAL #{dispatchTime} MINUTE)
    </select>

    <!--auto generated by MybatisCodeHelper on 2019-10-24-->
    <select id="listSecKillOrder" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from bt_bank_miner_order
        order by status asc,
        create_time asc
    </select>
    <select id="queryMinerOrderOrderByProcessStatusAndCreateTimeCount" resultType="java.lang.Long">

        SELECT
        count (*)
        FROM
        bt_bank_miner_order
        LEFT JOIN bt_bank_miner_order_transaction AS tran ON tran.miner_order_id = bt_bank_miner_order.id
        WHERE
        tran.type IN (1, 2)
        AND bt_bank_miner_order.member_id = #{memberId}
        ORDER BY
        tran.create_time DESC

    </select>
    <select id="queryMinerOrderOrderByProcessStatusAndCreateTime"
            resultType="com.spark.bitrade.api.vo.MinerOrderVO">


        SELECT
        <include refid="Base_Column_List"/>
        , transaction_create_time

        FROM(

        SELECT
        tran.create_time as transaction_create_time,tran.miner_order_id,bt_bank_miner_order.*
        FROM
        bt_bank_miner_order_transaction as tran left JOIN bt_bank_miner_order on tran.miner_order_id =
        bt_bank_miner_order.id
        WHERE
        tran.member_id=#{memberId} AND type IN (1, 2)
        <if test="types!= null and types.size()>0">
            AND bt_bank_miner_order.`status` IN
            <foreach collection="types" item="item" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        order by transaction_create_time desc
        ) AS bt_bank_miner_order

    </select>
    <select id="queryOrdersListOrderByStatusAndCreateTime"
            resultType="com.spark.bitrade.repository.entity.BtBankMinerOrder">


        SELECT
        *
        FROM
        bt_bank_miner_order

        where 1=1

        <if test="types!= null and types.size()>0">
            AND `status` IN
            <foreach collection="types" item="item" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>

        ORDER BY (case `status` when 0 then 0 else 1 end) ASC , ( case `status` when 0 then UNIX_TIMESTAMP(create_time) else
        -UNIX_TIMESTAMP(process_time) end) DESC


    </select>
    <select id="queryNewOrdersListByrange" resultType="com.spark.bitrade.repository.entity.BtBankMinerOrder">
        SELECT
        *
        FROM
        bt_bank_miner_order
        where
         `status` = 0
        <if test="type!= null">
            <choose>
                <when test="type == 1 ">
                    AND money   <![CDATA[ <= ]]> 500
                </when >
                <when test="type == 2 ">
                    AND 500    <![CDATA[ < ]]>  money  AND    money   <![CDATA[ <= ]]> 2000
                </when >
                <when test="type == 3 ">
                    AND 2000    <![CDATA[ < ]]>  money  AND    money   <![CDATA[ <= ]]> 5000
                </when >
                <when test="type == 4 ">
                    AND  5000    <![CDATA[ < ]]>  money
                </when >
            </choose>
        </if>
        ORDER BY (case `status` when 0 then 0 else 1 end) ASC , ( case `status` when 0 then UNIX_TIMESTAMP(create_time) else
        -UNIX_TIMESTAMP(process_time) end) DESC


    </select>



</mapper>